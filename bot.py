import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

logging.basicConfig(level=logging.INFO)

# –®–∞–≥–∏
MATERIAL, FROM, TO, VOLUME, DATE, TIME, PHONE = range(7)

materials = [["–ü–µ—Å–æ–∫", "–©–µ–±–µ–Ω—å"], ["–ë–æ–π –ê—Å—Ñ–∞–ª—å—Ç–∞", "–ë–æ–π –ë–µ—Ç–æ–Ω–∞", "–ë–æ–π –ö–∏—Ä–ø–∏—á–∞"]]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:",
        reply_markup=ReplyKeyboardMarkup(materials, one_time_keyboard=True)
    )
    return MATERIAL

async def get_material(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["material"] = update.message.text
    await update.message.reply_text("–û—Ç–∫—É–¥–∞ –≤–µ–∑—Ç–∏?")
    return FROM

async def get_from(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["from"] = update.message.text
    await update.message.reply_text("–ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å?")
    return TO

async def get_to(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["to"] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –∫—É–±–æ–≤?")
    return VOLUME

async def get_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["volume"] = update.message.text
    await update.message.reply_text("–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ? (–¥–∞—Ç–∞)")
    return DATE

async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["date"] = update.message.text
    await update.message.reply_text("–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è?")
    return TIME

async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["time"] = update.message.text
    await update.message.reply_text("–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text

    # –°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = (
        f"üöß *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n"
        f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {context.user_data['material']}\n"
        f"–û—Ç–∫—É–¥–∞: {context.user_data['from']}\n"
        f"–ö—É–¥–∞: {context.user_data['to']}\n"
        f"–û–±—ä—ë–º: {context.user_data['volume']} –º¬≥\n"
        f"–ö–æ–≥–¥–∞: {context.user_data['date']} –≤ {context.user_data['time']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {context.user_data['phone']}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–±–µ –≤ –∫–∞–Ω–∞–ª
    channel_id = "t.me/Perevoz_spb" 
    await context.bot.send_message(chat_id=channel_id, text=msg, parse_mode='Markdown')

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

if __name__ == '__main__':
    import os
    token = os.getenv("TOKEN")  # <-- –ù–µ –∑–∞–±—É–¥—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

    app = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MATERIAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_material)],
            FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_from)],
            TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_to)],
            VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_volume)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()
